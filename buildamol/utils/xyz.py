"""
Auxiliary functions for XYZ file handling.
"""

from tabulate import tabulate


def write_xyz(mol, filename):
    """
    Write a Molecule to an XYZ file.

    Parameters
    ----------
    mol : Molecule
        The molecule to write.
    filename : str
        The filename of the XYZ file.
    """
    with open(filename, "w") as f:
        f.write(f"{mol.count_atoms()}\n")
        if mol.id is not None:
            f.write(f"{mol.id}\n")
        else:
            f.write("Generated by buildamol\n")
        vectors = [
            [atom.element.title(), atom.coord[0], atom.coord[1], atom.coord[2]]
            for atom in mol.get_atoms()
        ]
        f.write(tabulate(vectors, tablefmt="plain", floatfmt=".4f", stralign="left"))


def read_xyz(filename) -> list:
    """
    Read a Molecule from an XYZ file.

    Parameters
    ----------
    filename : str
        The filename of the XYZ file.

    Returns
    -------
    mol_id : str
        The ID of the molecule.
    list
        A list of atoms in the molecule.
        Each entry is a tuple of (element, x, y, z).
    """
    with open(filename, "r") as f:
        num_atoms = int(f.readline().strip())
        mol_id = f.readline().strip()
        atoms = [None] * num_atoms
        for i, line in enumerate(f):
            parts = line.split()
            element = parts[0]
            x, y, z = map(float, parts[1:4])
            atoms[i] = (element, x, y, z)
    return mol_id, atoms


def iter_xyz(filename):
    """
    Iterate over the atoms in an XYZ file.

    Parameters
    ----------
    filename : str
        The filename of the XYZ file.

    Yields
    ------
    tuple
        A tuple of (element, x, y, z) for each atom.
    """
    with open(filename, "r") as f:
        # skip the first two lines
        f.readline()
        f.readline()
        for line in f:
            parts = line.split()
            element = parts[0]
            x, y, z = map(float, parts[1:4])
            yield (element, x, y, z)
